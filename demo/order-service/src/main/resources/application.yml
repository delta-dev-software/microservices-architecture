server:
  port: 8080


spring:
  main:
    allow-bean-definition-overriding: true

  application:
    name: order-service

  data:
    mongodb:
      uri: mongodb://user:password@localhost:27017/admin
  # Reactive WebFlux Configuration
#  webflux:
#    base-path: /api/v1

  # Data Source Configuration
#  datasource:
#    url: jdbc:postgresql://localhost:5432/orderdb
#    username: postgres
#    password: yourpassword
#    driver-class-name: org.postgresql.Driver

#  r2dbc:
#    url: r2dbc:postgresql://localhost:5432/orderdb
#    username: postgres
#    password: yourpassword

  # JPA Configuration (Optional if using R2DBC)
#  jpa:
#    hibernate:
#      ddl-auto: update
#    show-sql: true

  # Flyway Migration
#  flyway:
#    enabled: true
#    locations: classpath:db/migration
#    baseline-on-migrate: true

  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: order-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  # Elasticsearch Configuration
  elasticsearch:
    client:
      uris: http://localhost:9100
    index:
      orders: orders_index

#  mongodb:
#    uri: mongodb://user:password@localhost:27017/orderdb
#    database: orderdb
  # Logging Configuration
  logging:
    level:
      root: INFO
      org.springframework.web: DEBUG
      com.example.orderservice: DEBUG
    pattern:
      console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file:
      name: logs/orderservice.log
    logback:
      rollingpolicy:
        max-file-size: 10MB
        max-history: 30

  # Custom Properties
  custom:
    retry:
      max-attempts: 3
      backoff-delay: 2000

  # Management and Actuator Configuration
  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics, refresh
    endpoint:
      health:
        show-details: always
    health:
      elasticsearch:
        enabled: true
      kafka:
        enabled: true
    metrics:
      enabled: true

  # Security Configuration
  security:
    basic:
      enabled: false

  # Messaging Configuration
  messaging:
    kafka:
      order-topic: order_events

  # Configuring Reactive Timeout Settings
  reactor:
    core:
      operator:
        default-boundary: true
    netty:
      max-connections: 500
      max-idle-time: 120000

  # Configuring Circuit Breaker for Reactive Services
  resilience4j:
    circuitbreaker:
      instances:
        orderService:
          register-health-indicator: true
          sliding-window-size: 10
          minimum-number-of-calls: 5
          failure-rate-threshold: 50
          wait-duration-in-open-state: 10000

  # OpenAPI Configuration with Springdoc
  springdoc:
    api-docs:
      enabled: true
    swagger-ui:
      enabled: true

  # Enable Bean Definition Overriding
  spring:
    main:
      exclude:
        - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
    allow-bean-definition-overriding: true


  cloud:
    compatibility-verifier:
                     enabled: false
custom:
  retry:
    max-attempts: 5
    backoff-delay: 1000

  application:
    name: your-application-name  # Set your application name here
  zipkin:
    base-url: http://localhost:9411  # Zipkin server URL
  sleuth:
    sampler:
      probability: 1.0  # Set to 1.0 for 100% sampling; adjust as needed

management:
  endpoints:
    web:
      exposure:
        include:
          - prometheus  # Expose Prometheus metrics
  endpoint:
    prometheus:
      enabled: true  # Enable Prometheus metrics endpoint
  metrics:
    tags:
      enabled: true  # Enable tagging for metrics

#  datasource:
#    url: jdbc:h2:mem:testdb
#    driverClassName: org.h2.Driver
#    username: sa
#    password: password
#  h2:
#    console:
#      enabled: true
#  jpa:
#    database-platform: org.hibernate.dialect.H2Dialect
#  cloud:
#    config:
#      uri: http://localhost:8888
  quartz:
    job-store-type: memory # Use "memory" for in-memory jobs, or "jdbc" for persistent jobs in a database
    properties:
      org:
        quartz:
          scheduler:
            instanceName: QuartzScheduler
            instanceId: AUTO
          threadPool:
            threadCount: 10
          jobStore:
            class: org.quartz.simpl.RAMJobStore # Use RAMJobStore for in-memory, or JobStoreTX for JDBC persistence
 # This must match the configuration file name on the config server
#eureka:
#  client:
#    service-url:
#      defaultZone: http://localhost:8761/eureka/
#    instance:
#      prefer-ip-address: true
